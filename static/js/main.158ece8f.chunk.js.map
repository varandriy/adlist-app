{"version":3,"sources":["components/AnnouncementForm.js","utils.js","components/AnnouncementDetails.js","components/Announcement.js","components/AnnouncementList.js","App.js","reportWebVitals.js","index.js"],"names":["AnnouncementForm","onSubmit","edit","useState","value","inputName","setInputName","inputDescription","setInputDescription","FormControl","TextField","label","onChange","e","target","placeholder","style","margin","id","rows","variant","multiline","width","Button","color","onClick","preventDefault","Math","floor","random","name","description","date","Date","getWords","sentence","split","getAmountOfSameWords","a","b","count","word","includes","AnnouncementDetails","props","ad","ads","words","amountOfWordsByAdId","Object","fromEntries","map","otherAd","otherAdWords","topAds","filter","sort","slice","textAlign","padding","marginTop","marginBottom","fontSize","Grid","container","spacing","item","xs","length","marginRight","size","showDetail","verticalAlign","lineHeight","toLocaleString","Announcement","announcements","removeAd","updateAd","setEdit","expandedAdId","setExpandedAdId","border","borderRadius","CardActions","AnnouncementList","setAnnouncements","searchTerm","setSearchTerm","searchResults","person","toLowerCase","paddingTop","announcement","newAnnouncement","className","removeArr","adId","newValue","prev","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAGaA,EAAmB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAAW,EACpBC,mBAASD,EAAOA,EAAKE,MAAQ,IADT,mBAC/CC,EAD+C,KACpCC,EADoC,OAENH,mBAASD,EAAOA,EAAKE,MAAQ,IAFvB,mBAE/CG,EAF+C,KAE7BC,EAF6B,KAwBtD,OACE,8BAEI,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,MAAO,QACPC,SA1Be,SAAAC,GACvBP,EAAaO,EAAEC,OAAOV,QA0BdA,MAAOC,EACPU,YAAY,aACZC,MAAO,CAAEC,OAAQ,KAEnB,cAACP,EAAA,EAAD,CACEQ,GAAG,4BACHC,KAAM,EACNC,QAAQ,WACRT,MAAO,cACPU,WAAS,EACTT,SAjCsB,SAAAC,GAC9BL,EAAoBK,EAAEC,OAAOV,QAiCrBA,MAAOG,EACPQ,YAAY,oBACZC,MAAO,CAAEC,OAAQ,EAAGK,MAAO,OAE7B,cAACC,EAAA,EAAD,CACEH,QAAQ,WACRI,MAAM,UACNC,QArCW,SAAAZ,GACnBA,EAAEa,iBACFzB,EAAS,CACPiB,GAAIS,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMzB,EACN0B,YAAaxB,EACbyB,KAAM,IAAIC,OAEZ3B,EAAa,IACbE,EAAoB,KA6BZQ,MAAO,CAAEC,OAAQ,GAJnB,SAKEf,EAAO,SAAW,2B,QCtDjBgC,EAAW,SAACC,GACvB,OAAOA,EAASC,MAAM,OAGXC,EAAuB,SAACC,EAAGC,GACtC,IAD4C,EACxCC,EAAQ,EADgC,cAGzBF,GAHyB,IAG5C,2BAAsB,CAAC,IAAZG,EAAW,QACpBD,GAASD,EAAEG,SAASD,GAAQ,EAAI,GAJU,8BAO5C,OAAOD,G,QCNIG,EAAsB,SAACC,GAAW,IACrCC,EAAYD,EAAZC,GAAIC,EAAQF,EAARE,IACNC,EAAK,sBAAOb,EAASW,EAAGf,OAAnB,YAA6BI,EAASW,EAAGd,eAE9CiB,EAAsBC,OAAOC,YAAYJ,EAAIK,KAAI,SAACC,GACtD,IAAMC,EAAY,sBAAOnB,EAASkB,EAAQtB,OAAxB,YAAkCI,EAASkB,EAAQrB,eACrE,MAAO,CAACqB,EAAQlC,GAAImB,EAAqBgB,EAAcN,QAGnDO,EAASR,EACZS,QAAO,SAACH,GAAD,OAAaP,IAAOO,GAAWJ,EAAoBI,EAAQlC,IAAM,KACxEsC,MAAK,SAAClB,EAAGC,GAAJ,OAAUS,EAAoBT,EAAErB,IAAM8B,EAAoBV,EAAEpB,OACjEuC,MAAM,EAAG,GAEZ,OACE,sBAAKzC,MAAO,CAAE0C,UAAW,OAAQC,QAAS,GAAIC,WAAY,IAA1D,UACE,qBAAK5C,MAAO,CAAE6C,aAAc,GAA5B,0BAGA,qBAAK7C,MAAO,CAAE8C,SAAU,GAAID,aAAc,IAA1C,SAAiDhB,EAAGd,cAEpD,eAACgC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SAEIb,EAAOc,OAAS,GACd,gCACE,sBAAMpD,MAAO,CAAE8C,SAAU,GAAIO,YAAa,IAA1C,uBACUf,EAAOc,OADjB,eAIEd,EAAOH,KAAI,SAACN,GAAD,OACT,cAACtB,EAAA,EAAD,CACE+C,KAAK,QAEL7C,QAAS,kBAAMmB,EAAM2B,WAAW1B,EAAG3B,KAHrC,SAIE2B,EAAGf,MAFEe,EAAG3B,YAUtB,cAAC6C,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGnD,MAAO,CAAE8C,SAAU,GAAIU,cAAe,SAAUC,WAAY,QAA9E,SACG5B,EAAGb,KAAK0C,0B,QC1CNC,EAAe,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,cAAeC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EAC7C3E,mBAAS,CAC/Be,GAAI,KACJd,MAAO,KAH4D,mBAC9DF,EAD8D,KACxD6E,EADwD,OAM7B5E,mBAAS,MANoB,mBAM9D6E,EAN8D,KAMhDC,EANgD,KAgBrE,GAAI/E,EAAKgB,GACP,OAAO,cAAC,EAAD,CAAkBhB,KAAMA,EAAMD,SATlB,SAAAG,GACnB0E,EAAS5E,EAAKgB,GAAId,GAClB2E,EAAQ,CACN7D,GAAI,KACJd,MAAO,QAQX,IAAMmE,EAAa,SAACrD,GAClB+D,EAAgBD,IAAiB9D,EAAK,KAAOA,IAG/C,OACE0D,EAAczB,KAAI,SAACN,GAAD,OAChB,qBAAiB7B,MAAO,CAAEkE,OAAQ,oBAAqBC,aAAc,IAArE,SACE,eAACpB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,qBAAKnD,MAAO,CAAE2C,QAAS,GAAID,UAAW,QAAtC,SACGb,EAAGf,SAGR,cAACiC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAACiB,EAAA,EAAD,WACE,cAAC7D,EAAA,EAAD,CAAQ+C,KAAK,QAAQ7C,QAAS,kBAAM8C,EAAW1B,EAAG3B,KAAlD,qBACA,cAACK,EAAA,EAAD,CAAQ+C,KAAK,QAAQ7C,QAAS,kBAAMsD,EAAQ,CAAE7D,GAAI2B,EAAG3B,GAAId,MAAOyC,EAAGf,QAAnE,kBACA,cAACP,EAAA,EAAD,CAAQ+C,KAAK,QAAQ7C,QAAS,kBAAMoD,EAAShC,EAAG3B,KAAhD,yBAIF2B,EAAG3B,KAAO8D,GACR,cAACjB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,EAAD,CAAqBtB,GAAIA,EAAIC,IAAK8B,EAAeL,WAAYA,UAjB7D1B,EAAG3B,QC5BNmE,EAAmB,WAAO,IAAD,EACMlF,mBAAS,IADf,mBAC7ByE,EAD6B,KACdU,EADc,OAEAnF,mBAAS,IAFT,mBAE7BoF,EAF6B,KAEjBC,EAFiB,KA8B9BC,EAAgBb,EAAcrB,QAAO,SAAAmC,GAAM,OAC/CA,EAAO5D,KAAK6D,cAAcjD,SAAS6C,EAAWI,kBAGhD,OACE,sBAAK3E,MAAO,CAAE2C,QAAS,GAAIiC,WAAY,GAAvC,UACE,cAAC,EAAD,CAAkB3F,SAhCE,SAAA4F,GACtB,GAAKA,EAAa/D,KAAlB,CAIA,IAAMgE,EAAe,CAAID,GAAJ,mBAAqBjB,IAC1CU,EAAiBQ,OA2Bf,cAACpF,EAAA,EAAD,CACEC,MAAO,SACPoF,UAAU,eACV3F,MAAOmF,EACP3E,SAfe,SAAAC,GACnB2E,EAAc3E,EAAEC,OAAOV,QAenBW,YAAY,sBACZC,MAAO,CAAEC,OAAQ,MAEnB,qBAAKD,MAAO,CAAEC,OAAQ,GAAtB,SACE,cAAC,EAAD,CAAc2D,cAAea,EAAeZ,SAzBjC,SAAA3D,GACf,IAAM8E,EAAY,YAAIpB,GAAerB,QAAO,SAAAV,GAAE,OAAIA,EAAG3B,KAAOA,KAC5DoE,EAAiBU,IAuBmDlB,SAjCrD,SAACmB,EAAMC,GACjBA,EAASpE,MAIdwD,GAAiB,SAAAa,GAAI,OAAIA,EAAKhD,KAAI,SAAAe,GAAI,OAAKA,EAAKhD,KAAO+E,EAAOC,EAAWhC,iBCR9DkC,MAXf,WACE,OACE,sBAAKL,UAAU,MAAf,UACE,qBAAKA,UAAW,SAAhB,2BAGA,cAAC,EAAD,QCESM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.158ece8f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { FormControl, TextField, Button } from '@material-ui/core';\n\nexport const AnnouncementForm = ({ onSubmit, edit }) => {\n  const [inputName, setInputName] = useState(edit ? edit.value : '');\n  const [inputDescription, setInputDescription] = useState(edit ? edit.value : '');\n\n  const handleChangeName = e => {\n    setInputName(e.target.value);\n  };\n\n  const handleChangeDescription = e => {\n    setInputDescription(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      name: inputName,\n      description: inputDescription,\n      date: new Date(),\n    });\n    setInputName('');\n    setInputDescription('');\n  };\n\n  return (\n    <div>\n      {\n        <FormControl>\n          <TextField\n            label={'Title'}\n            onChange={handleChangeName}\n            value={inputName}\n            placeholder='Enter Name'\n            style={{ margin: 5}}\n          />\n          <TextField\n            id=\"outlined-multiline-static\"\n            rows={6}\n            variant=\"outlined\"\n            label={'Description'}\n            multiline\n            onChange={handleChangeDescription}\n            value={inputDescription}\n            placeholder='Enter Description'\n            style={{ margin: 5, width: 460 }}\n          />\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={handleSubmit}\n            style={{ margin: 5 }}\n          >{edit ? 'Change' : 'Add announcement'}</Button>\n        </FormControl>\n      }\n    </div>\n  );\n};\n","export const getWords = (sentence) => {\r\n  return sentence.split(/s+/);\r\n};\r\n\r\nexport const getAmountOfSameWords = (a, b) => {\r\n  let count = 0;\r\n\r\n  for (const word of a) {\r\n    count += b.includes(word) ? 1 : 0;\r\n  }\r\n\r\n  return count;\r\n};\r\n","import React from 'react';\r\nimport { getWords, getAmountOfSameWords } from '../utils';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nexport const AnnouncementDetails = (props) => {\r\n  const { ad, ads } = props;\r\n  const words = [...getWords(ad.name), ...getWords(ad.description)];\r\n\r\n  const amountOfWordsByAdId = Object.fromEntries(ads.map((otherAd) => {\r\n    const otherAdWords = [...getWords(otherAd.name), ...getWords(otherAd.description)];\r\n    return [otherAd.id, getAmountOfSameWords(otherAdWords, words)];\r\n  }));\r\n\r\n  const topAds = ads\r\n    .filter((otherAd) => ad !== otherAd && amountOfWordsByAdId[otherAd.id] > 0)\r\n    .sort((a, b) => amountOfWordsByAdId[b.id] - amountOfWordsByAdId[a.id])\r\n    .slice(0, 3);\r\n\r\n  return (\r\n    <div style={{ textAlign: 'left', padding: 12, marginTop: -12 }}>\r\n      <div style={{ marginBottom: 4 }}>\r\n        Description:\r\n      </div>\r\n      <div style={{ fontSize: 13, marginBottom: 14 }}>{ad.description}</div>\r\n\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={8}>\r\n          {\r\n            topAds.length > 0 && (\r\n              <div>\r\n                <span style={{ fontSize: 14, marginRight: 20 }}>\r\n                  {`TOP ${topAds.length} similar:`}\r\n                </span>\r\n                {\r\n                  topAds.map((ad) => (\r\n                    <Button\r\n                      size=\"small\"\r\n                      key={ad.id}\r\n                      onClick={() => props.showDetail(ad.id)}\r\n                    >{ad.name}\r\n                    </Button>\r\n                  ))\r\n                }\r\n              </div>\r\n            )\r\n          }\r\n        </Grid>\r\n        <Grid item xs={4} style={{ fontSize: 12, verticalAlign: 'bottom', lineHeight: '30px' }}>\r\n          {ad.date.toLocaleString()}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\nimport { AnnouncementForm } from './AnnouncementForm';\nimport { AnnouncementDetails } from './AnnouncementDetails';\nimport { Grid } from '@material-ui/core';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\n\nexport const Announcement = ({ announcements, removeAd, updateAd }) => {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: '',\n  });\n\n  const [expandedAdId, setExpandedAdId] = useState(null);\n\n  const submitUpdate = value => {\n    updateAd(edit.id, value);\n    setEdit({\n      id: null,\n      value: '',\n    });\n  };\n\n  if (edit.id) {\n    return <AnnouncementForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  const showDetail = (id) => {\n    setExpandedAdId(expandedAdId === id ? null : id);\n  };\n\n  return (\n    announcements.map((ad) => (\n      <div key={ad.id} style={{ border: '1px solid #cccccc', borderRadius: 10 }}>\n        <Grid container spacing={1}>\n          <Grid item xs={6}>\n            <div style={{ padding: 12, textAlign: 'left' }}>\n              {ad.name}\n            </div>\n          </Grid>\n          <Grid item xs={6}>\n            <CardActions>\n              <Button size=\"small\" onClick={() => showDetail(ad.id)}>Details</Button>\n              <Button size=\"small\" onClick={() => setEdit({ id: ad.id, value: ad.name })}>Edit</Button>\n              <Button size=\"small\" onClick={() => removeAd(ad.id)}>Delete</Button>\n            </CardActions>\n          </Grid>\n          {\n            ad.id === expandedAdId && (\n              <Grid item xs={12}>\n                <AnnouncementDetails ad={ad} ads={announcements} showDetail={showDetail} />\n              </Grid>\n            )\n          }\n        </Grid>\n      </div>\n    ))\n  );\n};\n","import React, { useState } from 'react';\nimport { AnnouncementForm } from './AnnouncementForm';\nimport { Announcement } from './Announcement';\nimport { TextField } from '@material-ui/core';\n\nexport const AnnouncementList = () => {\n  const [announcements, setAnnouncements] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const addAnnouncement = announcement => {\n    if (!announcement.name) {\n      return;\n    }\n\n    const newAnnouncement = [announcement, ...announcements];\n    setAnnouncements(newAnnouncement);\n  };\n\n  const updateAd = (adId, newValue) => {\n    if (!newValue.name) {\n      return;\n    }\n\n    setAnnouncements(prev => prev.map(item => (item.id === adId ? newValue : item)));\n  };\n\n  const removeAd = id => {\n    const removeArr = [...announcements].filter(ad => ad.id !== id);\n    setAnnouncements(removeArr);\n  };\n\n  const handleChange = e => {\n    setSearchTerm(e.target.value);\n  };\n\n  const searchResults = announcements.filter(person =>\n    person.name.toLowerCase().includes(searchTerm.toLowerCase()),\n  );\n\n  return (\n    <div style={{ padding: 24, paddingTop: 0 }}>\n      <AnnouncementForm onSubmit={addAnnouncement} />\n      <TextField\n        label={'Search'}\n        className='search-input'\n        value={searchTerm}\n        onChange={handleChange}\n        placeholder='search announcement'\n        style={{ margin: 10 }}\n      />\n      <div style={{ margin: 5 }}>\n        <Announcement announcements={searchResults} removeAd={removeAd} updateAd={updateAd} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport { AnnouncementList } from './components/AnnouncementList';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <div className={'header'}>\n        Announcements\n      </div>\n      <AnnouncementList/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}